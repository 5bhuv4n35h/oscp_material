Finding Offsets

Preliminaries.

You'll need a running rpc.statd process, 2 terms, 1 for running the exploit
the other for 'tail'ing /var/log/messages..Try to ensure that the rpc.statd is
running from bootup (or however its normally setup in your distribution).

Step 1. - Finding the padding

the statd exploit has 3 separate functions - exploit, findpad and find string.
They are numbered 0-2, respectively. to find the padding select 1, by adding
'-f 1' to the command line
e.g.

$ ./statd_exp 127.0.0.1 127.0.0.1 606 -o 20 -f 1
where 606 is the port on which its running
to find the port type 'rpcinfo -p' and select the udp statd one.

in /var/log/messages you should get something like:
Jul 15 16:19:20 godel ./rpc.statd[1277]: gethostbyname error for AAAAAAAABBBBBBBBCCCCCCCC3221222364 13451854410746446321752458599165179889518351018171919230053
544370546 54437053410947955851094795585|4242424242424242

notice the startling similarity between the beginning of the string and the end
'BBBBBBBB' and '4242424242424242'. this means we're close, ideally we want the
last bit to read 4141414141414141, so in this case change '-o 20' to '-o 12'.

if you get something like |41414142424242.. its not aligned properly on a
4byte boundary and you'll need to change the alignment with the -a option..
i've never encountered this myself so i dunno if it works :)

in all the cases i've seen the offset is relatively small, so start at like 8 or smt. (the code compensates for the beginning 'gethostbyname...' crap)

Step 2. Finding the buffer

I haven't come up with a feasible way of finding the buffer without gdb as yet.
the best way is to use the offset u just found, and the findstring function
and gdb rpc.statd looking for 'CCCCCCCCCCCCCCCCC'. Then the return location
should be easy to find. Look for a word close to the buffer that begins with '0x0804'

